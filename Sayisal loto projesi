#https://www.lotobil.com/Sayisal-Loto-Butun-Sonuc-Listesi#

#/storage/emulated/0/Download/sayisalloto.csv

import colorama
import time as _t
from colorama import Back,Fore,Style
import numpy as np
import pandas as pd
import os as _o
import sys as _s

return_index = 0
choose_data = []
year_arr = []
columns = ["tarih:","no:","S1","S2","S3","S4","S5","S6","  durum:"]

#b-g#

def select_option():
    action_choose = int(input('\n\n1-ÇIK\n2-TEKRAR BAŞLAT\n\n$>> '))

    if(action_choose == 1):
        try:
            if int(device_info) == 0:
                _o.system('cls')
        except:
            if int(device_info) == 1:
                _o.system('clear')
        finally:
                _s.exit()

    if(action_choose == 2):
        try:
            if int(device_info) == 0:
                _o.system('cls')
        except:
                if int(device_info) == 1:
                    _o.system('clear')
        finally:
                Choose.choose_function()

def quest_device():
    change_os = input('Cihazınızı seçin:\n\n0-Pc\n1-Mobil\n\n$> ')

    if(change_os.isdigit()):

        if(int(change_os) == 0):

            _o.system('cls')
            return change_os

        elif(int(change_os) == 1):

            _o.system('clear')
            return change_os

    elif change_os == '' or device_info == ' ':
        quest_device()

    else:
        quest_device()



device_info = quest_device()


data_frame = pd.read_csv(r"C:\Users\alper\Desktop\Top secret game\sayisalloto.csv")

class all_year_datas:
    def all_year_data():
        for vals in data_frame.values:
            print(vals) 
        print(Fore.RESET)

        #data_struct.all_datas()

class data_struct:
    def all_datas():
        
        year_arr.clear()

        print(Fore.LIGHTRED_EX,Style.BRIGHT)

        choose_option = input("\n\nHangi yilin verilerini istersiniz?\n\n>> ") 

        if int(choose_option) == 101:
            all_year_datas.all_year_data()
            
            input('Devam etmek için [ENTER]')
            

        else:
            print('pass')

        def recursive_stat():
                        action_choose = int(input('\n\n1-ÇIK\n2-BAŞA DÖN\n3-TEKRAR BAŞLAT\n\n$>> '))

                        if(action_choose == 1):
                            try:
                                if int(device_info) == 0:
                                    _o.system('cls')
                            except:
                                if int(device_info) == 1:
                                    _o.system('clear')
                            finally:
                                _s.exit()

                        elif(action_choose == 2):
                            try:
                                if int(device_info) == 0:
                                    _o.system('cls')
                            except:
                                if int(device_info) == 1:
                                    _o.system('clear')
                            finally:
                                data_struct.all_datas()

                        elif(action_choose == 3):
                            try:
                                if int(device_info) == 0:
                                    _o.system('cls')
                            except:
                                if int(device_info) == 1:
                                    _o.system('clear')
                            finally:
                                Choose.choose_function()

        def recursive():
            if int(choose_option) == 101:
                recursive_stat()

            if choose_option.startswith(' ') or choose_option == ' ' or choose_option == '':

                try:
                    if int(device_info) == 0:
                        print('BU ALAN BOŞ KALAMAZ')
                        _t.sleep(0.5)
                        _o.system('cls')
                        new_struct_win = data_struct.all_datas()

                        #print(new_struct_win)
                
                except:
                    if int(device_info) == 1:
                        print('BU ALAN BOŞ KALAMAZ')
                        _t.sleep(0.5)
                        _o.system('cls')
                        new_struct_unix = data_struct.all_datas()

                        print(new_struct_unix)

        def main_algorithm_object():

            for data_index in range(len(data_frame.values)):

                if str(data_frame.values[data_index][0]).startswith(str(choose_option)):
                    year_arr.append(data_frame.values[data_index])
                        
            try:		
                print(Fore.RESET,Style.RESET_ALL)

                print(pd.DataFrame(data=year_arr,columns=(columns[f] for f in range(len(data_frame.columns)))))
                        #nonerror hashhes#
                input('Devam etmek için [ENTER]')

            except Exception as maths_except:
                print(f"bir hata olustu\n\nHATA: {maths_except}")
                print(Fore.RESET,Style.RESET_ALL)
            try:
                if int(device_info) == 0:
                    _o.system("clear")
                    recursive_stat()
                    print(Fore.RESET,Style.RESET_ALL)

            except:
                if int(device_info) == 1:
                    _o.system("cls")
                    recursive_stat()	
                    print(Fore.RESET,Style.RESET_ALL)	


        main_algorithm_object()

class Choose():
    def choose_function():
        colorama.init() 

        print(Fore.GREEN,Style.BRIGHT)

        choose_input = input(f'1-Bütün çekiliş listesi(ARŞİV)\n2-En çok çıkan sayılar\n3-Tahmin al\n4-Tek-çift oranı\n5-Tek-çift dağılımı\n6-Asal sayılar çok çıkanlar\n{len('Asal sayılar en çok çıkanlar')*'-'}\n$>> ')
        
        print(Fore.RESET,Style.RESET_ALL)

        try:
            choose_data.append(int(choose_input))

            print(choose_data)
        except:
            _o.system("clear")
            Choose.choose_function()
        	
        Cli_side()
        try:
            return int(choose_input)   
            
        except:
            _o.system('cls')
            Choose.choose_function()
            

class Cli_side():
    def __init__(self):

        self.user_choose = choose_data.pop()

        print("Eger tum verileri gormek isterseniz 101 sayisini tuslayin...")

        if self.user_choose == 1:
            try:
                print(data_struct.all_datas())	
            except: 
                pass

            finally:
                action_choose_zero = int(input('\n\n1-ÇIK\n2-BAŞA DÖN\n3-TEKRAR BAŞLAT\n\n$>> '))

                if(action_choose_zero == 1):
                    if int(device_info) == 0:
                        _o.system('cls')
                    if int(device_info) == 1:   
                        _o.system('clear') 

                if(action_choose_zero == 2):
                    if int(device_info) == 0:
                        _o.system('cls')
                        data_struct.all_datas()
                    if int(device_info) == 1:
                        _o.system('clear')
                        data_struct.all_datas()

                if(action_choose_zero == 3):
                    try:
                        if int(device_info) == 0:
                            _o.system('cls')
                        if int(device_info) == 1:
                            _o.system('clear')

                    except:
                        pass ##empty##

                    finally:
                        print('MERHABAAA')
        
        elif self.user_choose == 2:
            class quest_class:
                def quest_year():
                    year_input = input('Hangi yıla ait sayı analizi istersiniz??\n\n>> ')

                    return_index = 0

                    if year_input == '' or  year_input == ' ':
                        if int(device_info) == 0:
                            _o.system('cls')
                            return year_input
                        
                        elif int(device_info) == 1:
                            _o.system('clear')
                            return year_input
                    
                        else:
                            return_index = 0

                    try:
                        f = float(year_input)

                        if f.is_integer():
                            return_index = 1

                        else:
                            pass

                    except:
                        return False
                    
                    finally:
                        if return_index == 0:
                            return False
                        
                        elif return_index == 1:
                            return int(year_input)

            def quest_all():
                year = quest_class.quest_year()
                
                
                value_data = []
                value_data_evers = []

                val_dat = []

                third_value_count_data_arr = []
                third_value_data_arr = []

                if year == False:

                    if int(device_info) == 0:
                        _o.system('cls')
                        quest_class.quest_year()
                    
                    elif int(device_info) == 1:
                        _o.system('clear')
                        quest_class.quest_year()

                
                elif year == 101:
                    try:
                        for data_indexes in range(len(data_frame.values)):
                            for data_Frame_datas in data_frame.values[data_indexes][2:7]:
                                value_data.append(data_Frame_datas)

                        unique_values = set(list(value_data))
                        
                        sorted_array = sorted(value_data,reverse=True)

                        for numsf in unique_values:
                            third_value_count_data_arr.append(value_data.count(numsf))
                        
                        sorted_count_array = sorted(third_value_count_data_arr,reverse=True)

                        for number,frequency in zip(sorted(unique_values,reverse=True),sorted_count_array):
                            print(f'sayı: ||{number}|| kaç defa geçti: ||{frequency}||')

                    except:
                        print(Fore.LIGHTBLACK_EX,'\nSayım Türü: HEPSİNİ SAY\nSayım sonucu: BASARİSİZ\n\nSayım tamamlanırken bir hata oluştu...')                

                    finally:
                        quest_action_second_input_3 = input('\n\n1-PROGRAMI KAPAT\n2-İŞLEMİN BAŞINA DÖN\n3-PROGRAMIN BAŞINA DÖN\n\n>>> ')

                        if str(quest_action_second_input_3).isdigit():
                                if int(quest_action_second_input_3) == 1:
                                    try:
                                        if int(device_info) == 0:
                                            _s.exit()
                                            _o.system('cls')
                                        
                                        elif int(device_info) == 1:
                                            _s.exit()
                                            _o.system('clear')          

                                    except:
                                        x1 = 0

                                if int(quest_action_second_input_3) == 2:
                                    try:
                                        if int(device_info) == 0:     
                                            _o.system('cls')
                                            quest_all()

                                        elif int(device_info) == 1:               
                                            _o.system('clear')
                                            quest_all()
                                    except:
                                        x2 = 1

                                if int(quest_action_second_input_3) == 3:
                                    try:
                                        if int(device_info) == 0:     
                                            _o.system('cls')
                                            Choose.choose_function()

                                        elif int(device_info) == 1:
                                            _o.system('clear')
                                            Choose.choose_function()
                                    except:
                                        x2 = 2                  

                else:
                    try:
                        third_value_data_arr_2 = []
                        third_value_count_data_arr_2 = []
                        value_data_evers_2 = []

                        for data_indexes in range(len(data_frame.values)):
                            for data_Frame_datas in data_frame.values[data_indexes][2:7]:
                                if str(data_frame.values[data_indexes][0]).startswith(str(year)):
                                    value_data.append(data_Frame_datas)
                                else:
                                    value_data_evers_2.append(data_Frame_datas)
                        
                        sorted_array_2 = sorted(value_data,reverse=True)

                        for nums in sorted_array_2:
                            third_value_count_data_arr_2.append(value_data_evers_2.count(nums))
                        
                        sorted_count_array_2 = sorted(third_value_count_data_arr_2,reverse=True)

                        for number_2,frequency_2 in zip(set(sorted_array_2),sorted_count_array_2):
                            print(f'sayı: ||{number_2}|| kaç defa geçti: ||{frequency_2}||')

                    except:
                        print(Fore.LIGHTBLACK_EX,'\nSayım Türü: BELİRLİ YILIN SAYILARINI SAY\nSayım sonucu: BASARİLİ\n\nSayım tamamlandı sonuçları inceleyebilirsiniz..') 

                    finally:
                        third_value_data_arr_2.clear()
                        third_value_count_data_arr_2.clear()
                        
                        quest_action_second_input_4 = input('\n\n1-PROGRAMI KAPAT\n2-İŞLEMİN BAŞINA DÖN\n3-PROGRAMIN BAŞINA DÖN\n\n>>> ')

                        if int(device_info) == 0:
                            _o.system('cls')

                        if str(quest_action_second_input_4).isdigit():
                                if int(quest_action_second_input_4) == 1:
                                    try:
                                        if int(device_info) == 0:     

                                            _o.system('cls')
                                            _s.exit()

                                        elif int(device_info) == 1:
                
                                            _o.system('clear')
                                            _s.exit()
                                            
                                    except:
                                        pass

                                if int(quest_action_second_input_4) == 2:
                                    try:
                                        if int(device_info) == 0:     

                                            _o.system('cls')
                                            quest_all()

                                        elif int(device_info) == 1:
                    
                                            _o.system('clear')
                                            quest_all()
                                    except:
                                        pass

                                if int(quest_action_second_input_4) == 3:
                                    try:
                                        if int(device_info) == 0:     

                                            _o.system('cls')
                                            Choose.choose_function()

                                        elif int(device_info) == 1:
                    
                                            _o.system('clear')
                                            Choose.choose_function()
                                    except:
                                        pass
                
        elif self.user_choose == 3:
            class Frekanslari_Sirala:
                def frekanslari_sirala(array):

                    meta_data = []

                    for matris in range(len(array)):
                        for matris in array[matris][2:7]:
                            meta_data.append(matris)

                    copied_array = meta_data.copy()
                    
                    set_array = sorted(set(list(sorted(copied_array,reverse=True))))

                    counted = []

                    result_matris = [[],[]]

                    x = input('kaç tane analiz istersin??\n\n>> ') 

                    if x.isdigit():
                        str_to_int = int(x)

                    else:
                        print('LÜTFEN bir sayı girin....!')
                        input()
                        Choose.choose_function()

                    g = 1

                    for numaralar in set_array:
                        g += 1

                        if g >= str_to_int:
                            break

                        counted.append(copied_array.count(numaralar))

                    g = 1

                    for numara,frekans in zip(sorted(set_array,reverse=True),sorted(counted,reverse=True)):
                        g += 1

                        if g >= str_to_int:
                            break  
                        
                        result_matris[0].append(numara)
                        result_matris[1].append(frekans)
                    
                    return result_matris
                
            try:
                print('Önerilen sayıları görmek için [ENTER]')

                input()

                result = Frekanslari_Sirala.frekanslari_sirala(data_frame.values)

                for number,count in zip(result[0],result[1]):
                    print(f'sayı: {number}')
            
            except Exception as exception:
                print(exception)

            finally:
                select_option()
            
        elif self.user_choose == 4:
            try:
                even_number_array = [] 
                odd_number_array = []

                for datas in range(len(data_frame.values)):
                    for data in data_frame.values[datas][2:7]:
                        if data %2 == 0: 
                            even_number_array.append(data)
                        
                        else:
                            odd_number_array.append(data)

                all_numbers = len(even_number_array) + len(odd_number_array)

                even_number_possibility = len(even_number_array) / all_numbers
                odd_number_possibility = len(odd_number_array) / all_numbers

                print(f'{'-'*45}\n||Çift sayı çıkma olasılığı: {even_number_possibility * 100 :.2f} ||\n{'-'*45}\n||Tek sayı çıkma olasılığı: {odd_number_possibility * 100 :.2f} ||\n{'-'*45}\n||Kaç tane tek sayı çıkmış: {len(even_number_array)}||\n{'-'*45}\n||Kaç tane tek sayı çıkmış: {len(odd_number_array)}||\n{'-'*45}')

                input('\n\n\nDEVAM ETMEK İÇİN [ENTER]')
            except Exception as number_odd_or_even_exception:
                print(f'exception in choose-4: {number_odd_or_even_exception}')
                even_number_array.clear()
                odd_number_array.clear()

            finally:
                even_number_array.clear()
                odd_number_array.clear()

                select_option()

        elif self.user_choose == 5:
            print('5')

        elif self.user_choose == 6:
            print('6')

        try:
            quest_all()

        except:
            pass
Choose.choose_function()


##verilen veri seti toplamda 7 kolondan oluşmalıdır yoksa program hatalı çalışır##
